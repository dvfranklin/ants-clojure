<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1465570149334">{:repl-history {:ide [], :local [&quot;(def ant {:x 10 :y 10 :color Color/BLACK})&quot; &quot;ant&quot; &quot;(:x ant)&quot; &quot;(for [ant ants]\n  (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n      (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))&quot; &quot;(filter\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))ants)&quot; &quot;(filter true?\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))) ants)&quot; &quot;(fn []\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))))&quot; &quot;(fn []\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))) ants)&quot; &quot;(filter\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))) ants)&quot; &quot;(filter (fn [ants]\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))) ants))&quot; &quot;(filter (fn [ants]\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(filter (fn []\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;\n(fn []\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))))&quot; &quot;\n\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))&quot; &quot;\n(set\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))))&quot; &quot;\n(contains? true\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))))&quot; &quot;\n(contains?\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))))&quot; &quot;\n(contains?\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))\n  true)&quot; &quot;\n(vec\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))))&quot; &quot;(filter true\n  (vec\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(filter \n  (vec\n  (for [ant ants]\n    (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n        (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(filter (true)\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(filter (= 1 1)\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(filter (1)\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(filter (fn [] true)\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(filter (fn [x] true)\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(frequencies\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))))&quot; &quot;(get frequencies\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))) :true)&quot; &quot;(get frequencies\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))) true)&quot; &quot;(get (frequencies\n  (vec\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10))))) true)&quot; &quot;(get (frequencies\n\n    (for [ant ants]\n      (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n          (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))) true)&quot; &quot;(def ant-array (create-ants))&quot; &quot;(if (&lt; 1 (count (get (frequencies\n                       (for [ant ant-array]\n                         (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n                             (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))) true)))\n  (assoc test-ant :color Color/RED))&quot; &quot;(if (&lt; 1 (get (frequencies\n                       (for [ant ant-array]\n                         (or (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n                             (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))) true))\n  (assoc test-ant :color Color/RED))&quot; &quot;(let [ant-array ants])&quot; &quot;(let [ant-array ants] (list (ant-array))&quot; &quot;(let [ant-array ants] (list ant-array))&quot; &quot;(let [ant-array @ants] ant-array)&quot; &quot;(def ants (atom nil))&quot; &quot;(reset! ants (create-ants))&quot; &quot;(let [ant-array ants] ant-array)&quot; &quot;(def test-ant (get ants 1))&quot; &quot;(let [ant-array   (seq @ants)]\n  (if (&gt; 1 (get (frequencies\n                  (for [ant ant-array]\n                    (and (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n                         (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))) true))\n    (assoc test-ant :color Color/RED)\n    (assoc test-ant :color Color/BLACK)))&quot; &quot;(def test-ant (first ants))&quot; &quot;(def ants (create-ants))&quot; &quot;(def ant-array (seq @ants))&quot; &quot;(deref ants)&quot; &quot;(deref @ants)&quot; &quot;@ants&quot; &quot;(def ants (atom (create-ants)))&quot; &quot;ants&quot; &quot;(def ant-array ants)&quot; &quot;(def ant-array @ants)&quot; &quot;ant-array&quot; &quot;(def test-ant (first ant-array))&quot; &quot;test-ant&quot; &quot;(get (frequencies\n       (for [ant ant-array]\n         (and (&lt; (Math/abs (- (:x ant) (:x test-ant))) 10)\n              (&lt; (Math/abs (- (:y ant) (:y test-ant))) 10)))) true)&quot;], :remote []}}</component>
</project>